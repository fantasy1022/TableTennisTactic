name: Android CI  

on:  
  push:  
    branches:  
      - main  
  pull_request:  
    branches:  
      - main  

jobs:  
  build:  

    runs-on: ubuntu-latest  

    env:  
      JAVA_HOME: /opt/java/openjdk-17  
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk  

    steps:  
    # 1. 檢出代碼
    - name: Checkout repository  
      uses: actions/checkout@v3  

    # 2. 設置 JDK
    - name: Set up JDK 17  
      uses: actions/setup-java@v3  
      with:  
        distribution: 'temurin' # 可以根據需要選擇適當的分發版，例如 temurin、adopt、zulu 等  
        java-version: '17'  

    # 3. 設置 Android SDK
    - name: Download Android SDK  
      uses: android-actions/setup-android@v2  
      with:  
        api-level: 33  
        target: default  
        arch: x64  
        cache: true  

    # 4. 解碼並設置 keystore 文件
    - name: Decode keystore
      run: echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > ${{ github.workspace }}/keystore.jks

    # 5. 設置 Gradle 緩存
    - name: Grant execute permission for Gradle wrapper  
      run: chmod +x ./gradlew  

    # 6. 構建 Debug 版 APK
    - name: Build Debug APK  
      run: ./gradlew assembleDebug  

    # 7. 構建 Release 版 APK
    - name: Build Release APK
      env:
        STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: ./gradlew assembleRelease    

    # 8. 提取版本號
    # - name: Extract version name
      # id: extract_version
      # run: |
      #     VERSION_NAME=$(grep versionName app/build.gradle | sed 's/versionName //;s/"//g')
      #     echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV

    - name: Extract version name using Gradle task
      id: extract_version
      run: |
          VERSION_NAME=$(./gradlew printVersionName | grep -m1 -o '[0-9]\+$\.[0-9]\+$*')
          echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV

    # 9. 獲取當前日期和時間
    - name: Get current date and time
      id: get_datetime
      run: | 
          DATETIME=$(date +%Y%m%d-%H%M)
          echo "DATETIME=$DATETIME" >> $GITHUB_ENV

    # 10. 修改 Debug APK 的名稱，加入版本和時間
    - name: Rename Release APK
      run: |
          ORIGINAL_APK=app/build/outputs/apk/debug/app-debug.apk
          NEW_APK=app/build/outputs/apk/debug/app-debug-v${{ env.VERSION_NAME }}-${{ env.DATETIME }}.apk
          mv "$ORIGINAL_APK" "$NEW_APK"

    # 11. 修改 Release APK 的名稱，加入版本和時間
    - name: Rename Release APK
      run: |
          ORIGINAL_APK=app/build/outputs/apk/release/app-release.apk
          NEW_APK=app/build/outputs/apk/release/app-release-v${{ env.VERSION_NAME }}-${{ env.DATETIME }}.apk
          mv "$ORIGINAL_APK" "$NEW_APK"

    # 12. 上傳重命名後的 Debug APK 作為構建產物
    - name: Upload Debug APK
      uses: actions/upload-artifact@v3
      with:
        name: debug-apk-v${{ env.VERSION_NAME }}-${{ env.DATETIME }}.apk
        path: app/build/outputs/apk/debug/app-debug-v${{ env.VERSION_NAME }}-${{ env.DATETIME }}.apk

    # 13. 上傳重命名後的 Release APK 作為構建產物
    - name: Upload Release APK
      uses: actions/upload-artifact@v3
      with:
        name: release-apk-v${{ env.VERSION_NAME }}-${{ env.DATETIME }}.apk
        path: app/build/outputs/apk/release/app-release-v${{ env.VERSION_NAME }}-${{ env.DATETIME }}.apk

